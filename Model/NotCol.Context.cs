//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NotColEntities : DbContext
    {
        public NotColEntities()
            : base("name=NotColEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Annotation> Annotations { get; set; }
        public virtual DbSet<AnnotationTag> AnnotationTags { get; set; }
        public virtual DbSet<Folder> Folders { get; set; }
        public virtual DbSet<Source> Sources { get; set; }
        public virtual DbSet<SourceUser> SourceUsers { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserTagUsage> UserTagUsages { get; set; }
        public virtual DbSet<SolarGroupUser> SolarGroupUsers { get; set; }
        public virtual DbSet<Follow> Follows { get; set; }
        public virtual DbSet<UploadedFileMapping> UploadedFileMappings { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<SourceUserTag> SourceUserTags { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationTemp> NotificationTemps { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetTagID(string tagName, ObjectParameter tagID, ObjectParameter tagNameOut)
        {
            var tagNameParameter = tagName != null ?
                new ObjectParameter("TagName", tagName) :
                new ObjectParameter("TagName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTagID", tagNameParameter, tagID, tagNameOut);
        }
    
        public virtual ObjectResult<GetTags_Result> GetTags(Nullable<long> userID, string strToSearch)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(long));
    
            var strToSearchParameter = strToSearch != null ?
                new ObjectParameter("strToSearch", strToSearch) :
                new ObjectParameter("strToSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTags_Result>("GetTags", userIDParameter, strToSearchParameter);
        }
    
        public virtual int SaveSource(string tags, Nullable<long> userID, string title, string link, string summary, Nullable<bool> readLater, Nullable<bool> saveOffline, Nullable<bool> privacy, Nullable<int> rating)
        {
            var tagsParameter = tags != null ?
                new ObjectParameter("tags", tags) :
                new ObjectParameter("tags", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("link", link) :
                new ObjectParameter("link", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("summary", summary) :
                new ObjectParameter("summary", typeof(string));
    
            var readLaterParameter = readLater.HasValue ?
                new ObjectParameter("readLater", readLater) :
                new ObjectParameter("readLater", typeof(bool));
    
            var saveOfflineParameter = saveOffline.HasValue ?
                new ObjectParameter("saveOffline", saveOffline) :
                new ObjectParameter("saveOffline", typeof(bool));
    
            var privacyParameter = privacy.HasValue ?
                new ObjectParameter("privacy", privacy) :
                new ObjectParameter("privacy", typeof(bool));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("rating", rating) :
                new ObjectParameter("rating", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveSource", tagsParameter, userIDParameter, titleParameter, linkParameter, summaryParameter, readLaterParameter, saveOfflineParameter, privacyParameter, ratingParameter);
        }
    
        public virtual int sp_UseStringList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UseStringList");
        }
    
        public virtual ObjectResult<spTestSourceData_Result> spTestSourceData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTestSourceData_Result>("spTestSourceData");
        }
    
        public virtual int SearchForSource(string keywordStr, Nullable<long> userID)
        {
            var keywordStrParameter = keywordStr != null ?
                new ObjectParameter("keywordStr", keywordStr) :
                new ObjectParameter("keywordStr", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SearchForSource", keywordStrParameter, userIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int DeleteAnnotation(Nullable<long> annotationID)
        {
            var annotationIDParameter = annotationID.HasValue ?
                new ObjectParameter("AnnotationID", annotationID) :
                new ObjectParameter("AnnotationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAnnotation", annotationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> DeleteSourceUser(Nullable<long> sourceUserID, Nullable<long> sourceID, ObjectParameter deleteSource)
        {
            var sourceUserIDParameter = sourceUserID.HasValue ?
                new ObjectParameter("SourceUserID", sourceUserID) :
                new ObjectParameter("SourceUserID", typeof(long));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("DeleteSourceUser", sourceUserIDParameter, sourceIDParameter, deleteSource);
        }
    
        public virtual int MarkNotificationAsRead(Nullable<long> notificationID)
        {
            var notificationIDParameter = notificationID.HasValue ?
                new ObjectParameter("notificationID", notificationID) :
                new ObjectParameter("notificationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkNotificationAsRead", notificationIDParameter);
        }
    
        public virtual int MarkNotificationAsUnread(Nullable<long> notificationID)
        {
            var notificationIDParameter = notificationID.HasValue ?
                new ObjectParameter("notificationID", notificationID) :
                new ObjectParameter("notificationID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MarkNotificationAsUnread", notificationIDParameter);
        }
    
        public virtual int GetUsersForTags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUsersForTags");
        }
    
        public virtual int GetUserProfileData(string username, ObjectParameter userID, ObjectParameter name, ObjectParameter followers, ObjectParameter follows, ObjectParameter sourceUser, ObjectParameter noteCount)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserProfileData", usernameParameter, userID, name, followers, follows, sourceUser, noteCount);
        }
    
        public virtual ObjectResult<GetUserProfileSourcePages_Result1> GetUserProfileSourcePages(Nullable<long> userID, Nullable<int> offset, Nullable<int> size)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(long));
    
            var offsetParameter = offset.HasValue ?
                new ObjectParameter("offset", offset) :
                new ObjectParameter("offset", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserProfileSourcePages_Result1>("GetUserProfileSourcePages", userIDParameter, offsetParameter, sizeParameter);
        }
    }
}
