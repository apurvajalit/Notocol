(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){var AccountController,hasProp={}.hasOwnProperty;AccountController=function(){AccountController.inject=["$scope","$filter","auth","flash","formRespond","identity","session"];function AccountController($scope,$filter,auth,flash,formRespond,identity,session){var onDelete,onError,onSuccess,persona_filter;persona_filter=$filter("persona");$scope.subscriptionDescription={reply:"Someone replies to one of my annotations"};onSuccess=function(form,response){var formModel,i,len,m,msgs,ref,type;ref=response.flash;for(type in ref){msgs=ref[type];for(i=0,len=msgs.length;i<len;i++){m=msgs[i];flash[type](m)}}form.$setPristine();formModel=form.$name.slice(0,-4);$scope[formModel]={};$scope.$broadcast("formState",form.$name,"success");return $scope.email=response.email};onDelete=function(form,response){identity.logout();return onSuccess(form,response)};onError=function(form,response){var i,len,m,msgs,ref,type;if(response.status>=400&&response.status<500){formRespond(form,response.data.errors)}else{if(response.data.flash){ref=response.data.flash;for(type in ref){if(!hasProp.call(ref,type))continue;msgs=ref[type];for(i=0,len=msgs.length;i<len;i++){m=msgs[i];flash[type](m)}}}else{flash.error("Sorry, we were unable to perform your request")}}return $scope.$broadcast("formState",form.$name,"")};$scope.tab="Account";session.profile().$promise.then(function(_this){return function(result){$scope.subscriptions=result.subscriptions;return $scope.email=result.email}}(this));$scope.editProfile={};$scope.changePassword={};$scope.deleteAccount={};$scope["delete"]=function(form){var errorHandler,packet,promise,successHandler,username;if(!form.$valid){return}username=persona_filter(auth.user);packet={username:username,pwd:form.pwd.$modelValue};successHandler=angular.bind(null,onDelete,form);errorHandler=angular.bind(null,onError,form);promise=session.disable_user(packet);return promise.$promise.then(successHandler,errorHandler)};$scope.submit=function(form){var errorHandler,packet,promise,successHandler,username;formRespond(form);if(!form.$valid){return}username=persona_filter(auth.user);packet={username:username,pwd:form.pwd.$modelValue,password:form.password.$modelValue};successHandler=angular.bind(null,onSuccess,form);errorHandler=angular.bind(null,onError,form);$scope.$broadcast("formState",form.$name,"loading");promise=session.edit_profile(packet);return promise.$promise.then(successHandler,errorHandler)};$scope.changeEmailSubmit=function(form){var errorHandler,packet,promise,successHandler,username;formRespond(form);if(!form.$valid){return}username=persona_filter(auth.user);packet={username:username,pwd:form.pwd.$modelValue,email:form.email.$modelValue,emailAgain:form.emailAgain.$modelValue};successHandler=angular.bind(null,onSuccess,form);errorHandler=angular.bind(null,onError,form);$scope.$broadcast("formState",form.$name,"loading");promise=session.edit_profile(packet);return promise.$promise.then(successHandler,errorHandler)};$scope.updated=function(index,form){var errorHandler,packet,promise,successHandler;packet={username:auth.user,subscriptions:JSON.stringify($scope.subscriptions[index])};successHandler=angular.bind(null,onSuccess,form);errorHandler=angular.bind(null,onError,form);promise=session.edit_profile(packet);return promise.$promise.then(successHandler,errorHandler)}}return AccountController}();angular.module("h").controller("AccountController",AccountController)},{}],2:[function(require,module,exports){(function(global){var AuthAppController,AuthPageController,angular,configure;angular=typeof window!=="undefined"?window.angular:typeof global!=="undefined"?global.angular:null;AuthAppController=function(){AuthAppController.$inject=["$location","$scope","$timeout","$window","session"];function AuthAppController($location,$scope,$timeout,$window,session){var onlogin;onlogin=function(){return $window.location.href="/stream"};$scope.account={};$scope.model={};$scope.account.tab=$location.path().split("/")[1];$scope.$on("auth",function(event,err,data){if(data!=null?data.userid:void 0){return $timeout(onlogin,1e3)}});$scope.$watch("account.tab",function(tab,old){if(tab!==old){return $location.path("/"+tab)}});session.load(function(data){if(data.userid){return onlogin()}})}return AuthAppController}();AuthPageController=function(){AuthPageController.$inject=["$routeParams","$scope"];function AuthPageController($routeParams,$scope){$scope.model.code=$routeParams.code;$scope.hasActivationCode=!!$routeParams.code}return AuthPageController}();configure=["$httpProvider","$locationProvider","$routeProvider",function($httpProvider,$locationProvider,$routeProvider){$httpProvider.defaults.xsrfHeaderName="X-CSRF-Token";$locationProvider.html5Mode(true);$routeProvider.when("/login",{controller:"AuthPageController",templateUrl:"auth.html"});$routeProvider.when("/register",{controller:"AuthPageController",templateUrl:"auth.html"});$routeProvider.when("/forgot_password",{controller:"AuthPageController",templateUrl:"auth.html"});return $routeProvider.when("/reset_password/:code?",{controller:"AuthPageController",templateUrl:"auth.html"})}];angular.module("h").config(configure).controller("AuthAppController",AuthAppController).controller("AuthPageController",AuthPageController);require("./account-controller");require("./auth-controller")}).call(this,typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{})},{"./account-controller":1,"./auth-controller":3}],3:[function(require,module,exports){var AuthController;AuthController=function(){AuthController.$inject=["$scope","$timeout","flash","session","formRespond"];function AuthController($scope,$timeout,flash,session,formRespond){var failure,success,timeout;timeout=null;success=function(data){var ref;if(data.userid){$scope.$emit("auth",null,data)}$scope.account.tab=function(){switch($scope.account.tab){case"register":return"login";case"forgot_password":return"reset_password";case"reset_password":return"login";default:return $scope.account.tab}}();angular.copy({},$scope.model);return(ref=$scope.form)!=null?ref.$setPristine():void 0};failure=function(form,response){var errors,reason,ref;try{ref=response.data,errors=ref.errors,reason=ref.reason}catch(_error){reason="Oops, something went wrong on the server. Please try again later!"}return formRespond(form,errors,reason)};this.submit=function(form){formRespond(form);if(!form.$valid){return}$scope.$broadcast("formState",form.$name,"loading");return session[form.$name]($scope.model,success,angular.bind(this,failure,form)).$promise["finally"](function(){return $scope.$broadcast("formState",form.$name,"")})};if($scope.account==null){$scope.account={tab:"login"}}if($scope.model==null){$scope.model={}}$scope.$on("auth",function(){var preventCancel;return preventCancel=$scope.$on("$destroy",function(){if(timeout){$timeout.cancel(timeout)}return $scope.$emit("auth","cancel")})}());$scope.$watchCollection("model",function(value){if(timeout){$timeout.cancel(timeout)}if(value&&!angular.equals(value,{})){return timeout=$timeout(function(){var ref;angular.copy({},$scope.model);if((ref=$scope.form)!=null){ref.$setPristine()}return flash.info("For your security, the forms have been reset due to inactivity.")},3e5)}})}return AuthController}();angular.module("h").controller("AuthController",AuthController)},{}]},{},[2]);